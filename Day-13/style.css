/* Chapter 17: Cascading and Specificity */

/* Section 17.1: Calculating Selector Specificity */

/* Each individual CSS Selector has its own specificity value. Every selector in a sequence increases the sequence's
overall specificity. Selectors fall into one of three different specificity groups: A, B and c. When multiple selector
sequences select a given element, the browser uses the styles applied by the sequence with the highest overall
specificity. */

/* A final note */

/* A common misconception about CSS specificity is that the Group A, B and c values should be combined with each
other (a=1, b=5, c=1 => 151). This is not the case. If this were the case, having 20 of a Group B or c selector would
be enough to override a single Group A or B selector respectively. The three groups should be regarded as
individual levels of specificity. Specificity cannot be represented by a single value.
When creating your CSS style sheet, you should maintain the lowest specificity as possible. If you need to make the
specificity a little higher to overwrite another method, make it higher but as low as possible to make it higher. You
shouldn't need to have a selector like this:
body.page header.container nav div#main-nav li a {}
This makes future changes harder and pollutes that css page.
You can calculate the specificity of your selector here */

/* Section 17.2: The !important declaration */

/* The !important declaration is used to override the usual specificity in a style sheet by giving a higher priority to a
rule. Its usage is: property : value !important */

/* Section 17.3: Cascading */

/* Cascading and specificity are used together to determine the final value of a CSS styling property. They also define
the mechanisms for resolving conflicts in CSS rule sets. */

/* Chapter 18: Colors */

/* currentColor returns the computed color value of the current element. */

div {
  color: red;
  background-color: #212121;
}

p {
  background-color: currentColor;
}

/* Section 18.2: Color Keywords */

/* Most browsers support using color keywords to specify a color. For example, to set the color of an element to blue,
use the blue keyword. */

/* CSS keywords are not case sensitive—blue, Blue and BLUE will all result in #0000FF. */

/* Section 18.3: Hexadecimal Value */

/* Background */

/* CSS colors may also be represented as a hex triplet, where the members represent the red, green and blue
components of a color. Each of these values represents a number in the range of 00 to FF, or 0 to 255 in decimal
notation. Uppercase and/or lowercase Hexadecimal values may be used (i.e. #3fc = #3FC = #33ffCC). The browser
interprets #369 as #336699. If that is not what you intended but rather wanted #306090, you need to specify that
explicitly. */

/* The total number of colors that can be represented with hex notation is 256 ^ 3 or 16,777,216. */

/*
color: #rrggbb; #212121 
color: #rgb #222 */

/* Hex values always start with a pound sign (#), are up to six "digits" long, and are case-insensitive: that is, they don't
care about capitalization. #FFC125 and #ffc125 are the same color. */

/* Section 18.4: rgb() Notation */

/* RGB is an additive color model which represents colors as mixtures of red, green, and blue light. In essence, the
RGB representation is the decimal equivalent of the Hexadecimal Notation. In Hexadecimal each number ranges
from 00-FF which is equivalent to 0-255 in decimal and 0%-100% in percentages. */
some-class {
  /* Scalar RGB, equivalent to 'blue'*/
  color: rgb(0, 0, 255);
}
.also-blue {
  /* Percentile RGB values*/
  color: rgb(0%, 0%, 100%);
}

/* Section 18.5: rgba() Notation */

/* Similar to rgb() notation, but with an additional alpha (opacity) value. */

/* a number from 0 - 1, where 0.0 is fully transparent and 1.0 is fully opaque */

/* Section 18.6: hsl() Notation */

/* Hue is represented as an angle from 0° to 360° (without units), while saturation and lightness are represented as
percentages. */
p {
  color: hsl(240, 100%, 50%); /* Blue */
}

/* Section 18.7: hsla() Notation */

/* Similar to hsl() notation, but with an added alpha (opacity) value. */
